Index: src/view/InitializedView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport entities.NumberCardsDeck.NumberCardsDeck;\r\nimport entities.NumberCardsDeck.NumberCardsDeckCreator;\r\nimport interface_adapter.DrawCards.DrawCardsController;\r\nimport interface_adapter.DrawCards.DrawCardsViewModel;\r\nimport interface_adapter.Initialized.InitializedState;\r\nimport interface_adapter.Initialized.InitializedViewModel;\r\nimport interface_adapter.SelectCard.SelectCardController;\r\nimport interface_adapter.SelectCard.SelectCardState;\r\nimport interface_adapter.SelectCard.SelectCardViewModel;\r\nimport interface_adapter.Undo.UndoController;\r\nimport use_case.SelectCard.SelectCardInputData;\r\nimport use_case.Undo.UndoInputData;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.beans.PropertyChangeEvent;\r\nimport java.beans.PropertyChangeListener;\r\nimport java.util.ArrayList;\r\n\r\n//public class InitializedView extends JPanel implements ActionListener, PropertyChangeListener {\r\n//    public final String viewName = \"Initialized\";\r\n//    private final InitializedViewModel initializedViewModel;\r\n//\r\n//    JLabel playername;\r\n//\r\n//    public InitializedView(InitializedViewModel initializedViewModel) {\r\n//        this.initializedViewModel = initializedViewModel;\r\n//        this.initializedViewModel.addPropertyChangeListener(this);\r\n//\r\n//        JLabel title = new JLabel(\"Initialized Screen\");\r\n//        title.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n//\r\n//        JLabel usernameInfo = new JLabel(\"Currently players: \");\r\n//        playername = new JLabel();\r\n//\r\n//        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\r\n//\r\n//        this.add(title);\r\n//        this.add(usernameInfo);\r\n//        this.add(playername);\r\n//    }\r\n//\r\n//    @Override\r\n//    public void actionPerformed(ActionEvent e) {\r\n//        System.out.println(\"Click \" + e.getActionCommand());\r\n//    }\r\n//\r\n//    @Override\r\n//    public void propertyChange(PropertyChangeEvent evt) {\r\n//        InitializedState state = (InitializedState) evt.getNewValue();\r\n//        // we don't know how many players there are, so we can't create player1, player2 ...\r\n//        // this is the best we can do, display all players in one string\r\n//        String output = \"\";\r\n//        ArrayList<String> players = state.get_players();\r\n//        for (int i = 0; i < players.size(); i++)\r\n//            output += (players.get(i) + \"\\n\");\r\n//        playername.setText(output);\r\n//    }\r\n//}\r\npublic class InitializedView extends JPanel implements ActionListener, PropertyChangeListener{\r\n\r\n    public final String viewName;\r\n    private final InitializedViewModel initializedViewModel;\r\n    private final UndoController undoController;\r\n    private final DrawCardsController drawCardsController;\r\n    private final DrawCardsViewModel drawCardsViewModel;\r\n    private final SelectCardController selectCardController;\r\n    private final SelectCardViewModel selectCardViewModel;\r\n\r\n\r\n    public InitializedView(InitializedViewModel initializedViewModel, DrawCardsViewModel drawCardsViewModel, UndoController undoController, DrawCardsController drawCardsController, SelectCardController selectCardController, SelectCardViewModel selectCardViewModel) {\r\n        JLabel title = new JLabel(\"Initialized Screen\");\r\n        title.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        this.viewName = \"InitializedView\";\r\n        this.initializedViewModel = initializedViewModel;\r\n        this.drawCardsController = drawCardsController;\r\n        this.undoController = undoController;\r\n        this.drawCardsViewModel = drawCardsViewModel;\r\n        this.selectCardController = selectCardController;\r\n        this.selectCardViewModel = selectCardViewModel;\r\n        setSize(1200, 1000);\r\n\r\n        this.setLayout(new BorderLayout());\r\n        Color darkRed = new Color(218, 40, 40);\r\n        this.setBackground(darkRed);\r\n\r\n        JPanel playerPanel = new JPanel();\r\n        playerPanel.setLayout(new GridLayout(1, 4, 10, 10));\r\n        playerPanel.setOpaque(false);\r\n        ArrayList<Color> colorList = new ArrayList<>();\r\n        colorList.add(new Color(173, 216, 230));\r\n        colorList.add(new Color(255, 255, 210));\r\n        colorList.add(new Color(144, 238, 144));\r\n        colorList.add(new Color(255, 224, 255));\r\n\r\n\r\n        for (int i = 1; i <= 4; i++) {\r\n            JPanel playerInfo = new JPanel();\r\n            playerInfo.setLayout(new BorderLayout());\r\n            playerInfo.setBorder(BorderFactory.createLineBorder(Color.WHITE, 15));\r\n            Dimension preferredSize = playerInfo.getPreferredSize();\r\n            preferredSize.height = 120;\r\n            playerInfo.setPreferredSize(preferredSize);\r\n            JLabel usernameLabel = new JLabel(\"PLAYER \" + i + \" USERNAME\");//这个需要根据viewmodel来\r\n            JLabel scoreLabel = new JLabel(\"Score: 0\");\r\n            playerInfo.add(usernameLabel, BorderLayout.NORTH);\r\n            playerInfo.add(scoreLabel, BorderLayout.SOUTH);\r\n            playerPanel.add(playerInfo);\r\n            playerInfo.setBackground(colorList.get(i - 1));\r\n        }\r\n\r\n        JPanel cardPanel = new JPanel();\r\n        cardPanel.setLayout(new BorderLayout());\r\n        cardPanel.setOpaque(false);\r\n\r\n        JPanel infopanel = new JPanel();\r\n\r\n        JPanel playpanel = new JPanel();\r\n\r\n\r\n        JButton[] cardButtons = new JButton[3];\r\n\r\n        for (int i = 0; i < 3; i++) {\r\n            cardButtons[i] = new JButton(\"Card \" + i);\r\n            cardButtons[i].setPreferredSize(new Dimension(130, 200));\r\n            cardButtons[i].setBorder(BorderFactory.createEmptyBorder());\r\n            cardButtons[i].setBackground(Color.YELLOW);\r\n            cardButtons[i].setOpaque(true);\r\n            playpanel.add(cardButtons[i]);\r\n        }\r\n\r\n        JButton getCardButton = new JButton(\"Get Card\");\r\n        getCardButton.setPreferredSize(new Dimension(130, 200));\r\n        getCardButton.setBorder(BorderFactory.createEmptyBorder()); //!!!!!!这一行非常重要，如果button不去除边框就直接更改背景颜\r\n        //色，将会出现只有边上一圈改变了颜色的现象\r\n\r\n        getCardButton.setForeground(Color.WHITE);\r\n\r\n        // 设置按钮背景颜色为黑色\r\n        getCardButton.setBackground(Color.BLACK);\r\n\r\n        // 设置按钮文本的字体为粗体\r\n        getCardButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\r\n\r\n        // 对于某些外观和感觉（如Mac OS的默认外观），需要这个设置才能使背景颜色生效\r\n        getCardButton.setOpaque(true);\r\n\r\n\r\n        JButton undoButton = new JButton(\"Undo\");\r\n        JButton whichcolorButton = new JButton();\r\n        whichcolorButton.setPreferredSize(new Dimension(130, 200));\r\n        whichcolorButton.setBorder(BorderFactory.createEmptyBorder());\r\n        whichcolorButton.setOpaque(true);\r\n        whichcolorButton.setBackground(Color.BLUE); //需要改这里！！！这个地方展示了正在play的颜色！！！\r\n        infopanel.add(getCardButton);\r\n        infopanel.add(whichcolorButton);\r\n        infopanel.add(undoButton);\r\n        infopanel.setOpaque(false);\r\n        playpanel.setOpaque(false);\r\n        cardPanel.add(infopanel, BorderLayout.NORTH);\r\n        cardPanel.add(playpanel, BorderLayout.CENTER);\r\n        cardPanel.setOpaque(false);\r\n\r\n        JPanel controlPanel = new JPanel();\r\n        controlPanel.setLayout(new FlowLayout());\r\n        controlPanel.setOpaque(false);\r\n\r\n        JButton nextTurnButton = new JButton(\"Next Turn\");\r\n\r\n\r\n        controlPanel.add(nextTurnButton);\r\n\r\n        this.add(playerPanel, BorderLayout.NORTH);\r\n        this.add(cardPanel, BorderLayout.CENTER);\r\n        this.add(controlPanel, BorderLayout.SOUTH);\r\n\r\n        //TODO: figure out where to put the numberCardDeck and player\r\n        drawCardsController.execute(initializedViewModel.getState().get_players(), numberCardsDeck,5);\r\n\r\n        undoButton.addActionListener(\r\n                new ActionListener() {\r\n                    @Override\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        if (e.getSource().equals(\"Undo\")) {\r\n                            UndoInputData inputData = new UndoInputData(selectCardViewModel.getSelectCardState().getSelectedCard());\r\n                            SelectCardState state = new SelectCardState();\r\n                            state.setSelectedCard(null);\r\n                            selectCardViewModel.setSelectCardState(state);\r\n                            undoController.execute(inputData);\r\n                            undoButton.setEnabled(false);\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        cardButtons[0].addActionListener(\r\n                new ActionListener() {\r\n                    @Override\r\n                    public void actionPerformed(ActionEvent e) {\r\n                         if (e.getSource().equals(\"Card 0\")) {\r\n                             undoButton.setEnabled(true);\r\n                             cardButtons[0].setBackground(new Color(255, 255, 210));\r\n                             SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0())\r\n                             selectCardController.execute(inputData);\r\n                         }\r\n                    }\r\n                }\r\n        );\r\n\r\n        cardButtons[1].addActionListener(\r\n                new ActionListener() {\r\n                    @Override\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        if (e.getSource().equals(\"Card 1\")) {\r\n                            undoButton.setEnabled(true);\r\n                            cardButtons[1].setBackground(new Color(255, 255, 210));\r\n                            SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0());\r\n                            selectCardController.execute(inputData);\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        cardButtons[2].addActionListener(\r\n                new ActionListener() {\r\n                    @Override\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        if (e.getSource().equals(\"Card 2\")) {\r\n                            undoButton.setEnabled(true);\r\n                            cardButtons[2].setBackground(new Color(255, 255, 210));\r\n                            SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0())\r\n                            selectCardController.execute(inputData);\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n\r\n    }\r\n    public void actionPerformed(ActionEvent e) {\r\n        System.out.println(\"Click \" + e.getActionCommand());\r\n    }\r\n\r\n    @Override\r\n    public void propertyChange(PropertyChangeEvent evt) {\r\n        InitializedState state = (InitializedState) evt.getNewValue();\r\n        // we don't know how many players there are, so we can't create player1, player2 ...\r\n        // this is the best we can do, display all players in one string\r\n        String output = \"\";\r\n        ArrayList<String> players = state.get_players();\r\n        for (int i = 0; i < players.size(); i++)\r\n            output += (players.get(i) + \"\\n\");\r\n//        playername.setText(output);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/InitializedView.java b/src/view/InitializedView.java
--- a/src/view/InitializedView.java	
+++ b/src/view/InitializedView.java	
@@ -204,7 +204,7 @@
                          if (e.getSource().equals("Card 0")) {
                              undoButton.setEnabled(true);
                              cardButtons[0].setBackground(new Color(255, 255, 210));
-                             SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0())
+                             SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0());
                              selectCardController.execute(inputData);
                          }
                     }
@@ -232,7 +232,7 @@
                         if (e.getSource().equals("Card 2")) {
                             undoButton.setEnabled(true);
                             cardButtons[2].setBackground(new Color(255, 255, 210));
-                            SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0())
+                            SelectCardInputData inputData = new SelectCardInputData(player, drawCardsViewModel.getDrawCardsState().getNumberCard0());
                             selectCardController.execute(inputData);
                         }
                     }
